import _extends from '@babel/runtime/helpers/es6/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/es6/objectWithoutProperties';
import _inheritsLoose from '@babel/runtime/helpers/es6/inheritsLoose';
import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';

var buildSelector = function buildSelector(obj) {
  return Object.keys(obj).map(function (k) {
    return "[" + k + "=\"" + obj[k] + "\"]";
  }).join('');
};

var HeadTag =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(HeadTag, _Component);

  function HeadTag() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      canUseDOM: false
    };
    return _this;
  }

  var _proto = HeadTag.prototype;

  _proto.componentDidMount = function componentDidMount() {
    // eslint-disable-next-line react/no-did-mount-set-state
    this.setState({
      canUseDOM: true
    });

    var _this$props = this.props,
        tag = _this$props.tag,
        children = _this$props.children,
        rest = _objectWithoutProperties(_this$props, ["tag", "children"]); // eslint-disable-line react/prop-types


    var ssrTags = document.head.querySelector("" + tag + buildSelector(rest) + "[data-rh=\"\"]");
    /* istanbul ignore else */

    if (ssrTags) {
      ssrTags.remove();
    }
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        Tag = _this$props2.tag,
        rest = _objectWithoutProperties(_this$props2, ["tag"]);

    if (this.state.canUseDOM) {
      var Comp = React.createElement(Tag, rest);
      return ReactDOM.createPortal(Comp, document.head);
    } // on client we don't require HeadCollector


    if (this.context.reactHeadTags) {
      var ServerComp = React.createElement(Tag, _extends({
        "data-rh": ""
      }, rest));
      this.context.reactHeadTags.add(ServerComp);
    }

    return null;
  };

  return HeadTag;
}(Component);

HeadTag.contextTypes = {
  reactHeadTags: PropTypes.object
};
HeadTag.defaultProps = {
  tag: 'meta'
};
HeadTag.propTypes = process.env.NODE_ENV !== "production" ? {
  tag: PropTypes.string
} : {};

var HeadCollector =
/*#__PURE__*/
function (_Component) {
  _inheritsLoose(HeadCollector, _Component);

  function HeadCollector() {
    return _Component.apply(this, arguments) || this;
  }

  var _proto = HeadCollector.prototype;

  _proto.getChildContext = function getChildContext() {
    var _this = this;

    return {
      reactHeadTags: {
        add: function add(c) {
          return _this.props.headTags.push(c);
        }
      }
    };
  };

  _proto.render = function render() {
    return React.Children.only(this.props.children);
  };

  return HeadCollector;
}(Component);

HeadCollector.childContextTypes = {
  reactHeadTags: PropTypes.object
};
HeadCollector.propTypes = process.env.NODE_ENV !== "production" ? {
  headTags: PropTypes.array.isRequired,
  // eslint-disable-line react/forbid-prop-types
  children: PropTypes.node.isRequired
} : {};

var Title = function Title(props) {
  return React.createElement(HeadTag, _extends({
    tag: "title"
  }, props));
};
var Style = function Style(props) {
  return React.createElement(HeadTag, _extends({
    tag: "style"
  }, props));
};
var Meta = function Meta(props) {
  return React.createElement(HeadTag, _extends({
    tag: "meta"
  }, props));
};
var Link = function Link(props) {
  return React.createElement(HeadTag, _extends({
    tag: "link"
  }, props));
};

export default HeadTag;
export { Title, Style, Meta, Link, HeadCollector };
